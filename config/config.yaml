# Advanced OCR Configuration File

# LLM Provider Settings
llm:
  primary_provider: "qwen"  # openai, anthropic, gemini, or qwen
  fallback_provider: null  # openai, anthropic, gemini, qwen, or null

  openai:
    model: "gpt-4-vision-preview"
    max_tokens: 4096
    temperature: 0.1
    detail: "high"  # low, high, or auto

  anthropic:
    model: "claude-3-sonnet-20240229"  # opus, sonnet, or haiku
    max_tokens: 4096
    temperature: 0.1

  gemini:
    model: "gemini-1.5-flash"  # gemini-1.5-pro or gemini-1.5-flash
    max_tokens: 4096
    temperature: 0.1

  qwen:
    model: "qwen-vl-max"  # 使用qwen-vl-max以获得更好的质量
    max_tokens: 16384  # 进一步增加以处理复杂SVG
    temperature: 0.1

  # 几何图形处理策略配置
  geometry:
    # 处理策略: "crop" = 直接裁剪原图, "svg" = 生成SVG矢量图
    strategy: "crop"  # 默认使用裁剪策略，保留原图质量
    # 注意: 系统会严格使用LLM返回的裁剪坐标，不使用默认坐标
    # 如果LLM没有返回有效坐标，则不会进行裁剪

  # LLM请求超时时间(秒)
  request_timeout_seconds: 600

  concurrency:
    enable: true
    max_parallel_requests: 3

  retry:
    max_attempts: 3
    delay_seconds: 2
    backoff_multiplier: 2

# Image Processing Settings
image:
  max_size_mb: 10
  supported_formats:
    - png
    - jpg
    - jpeg
    - pdf
  quality: 90
  base64_format: "jpeg"   # jpeg, png, webp
  base64_quality: 85
  base64_max_bytes: 3145728  # 3MB 上限, 超过会自动压缩/缩放
  preprocessing:
    resize_if_large: true
    max_dimension: 1600
    enhance_contrast: false
    denoise: false
  slicing:
    enable: true
    min_height: 2200
    aspect_ratio_threshold: 2.0
    target_height: 1100
    min_segment_height: 700
    overlap: 160  # 固定overlap模式下使用（当adaptive_overlap.enable=false时）
    whitespace_window: 150
    whitespace_density_threshold: 0.08
    max_segments: 0  # 0 表示不限制切片数量

    # 自适应overlap配置（根据切分点质量动态调整overlap大小）
    adaptive_overlap:
      enable: true  # 是否启用自适应overlap
      excellent_threshold: 0.05  # 极佳切分点阈值（内容密度 <= 0.05视为完全空白）
      good_threshold: 0.10       # 良好切分点阈值（内容密度 <= 0.10视为较空白）
      excellent_overlap: 0       # 极佳切分点使用的overlap（px）
      good_overlap: 30           # 良好切分点使用的overlap（px）
      default_overlap: 160       # 默认overlap（在内容区域切分时使用）

    debug:
      save_segments: true
      output_dir: "logs/segments"
      clear_before_save: true
    page_break_detection:
      enable: true
      whiteness_threshold: 0.97
      min_blank_height: 180
      margin_ratio: 0.04

# Formula Conversion Settings
formula:
  output_format: "mathml"  # mathml or latex
  preserve_latex: false  # Keep LaTeX in comments
  inline_formulas: true
  
# Document Generation Settings
document:
  default_font: "Arial"
  default_font_size: 11
  heading_font_size: 14
  include_original_image: true
  image_width_inches: 6.0
  page_margins:
    top: 1.0
    bottom: 1.0
    left: 1.0
    right: 1.0

# Graphics Generation Settings (for 3D geometry, diagrams, etc.)
graphics:
  enabled: false  # Disable graphics generation, use crop strategy instead
  backend: "tikz"  # tikz, matplotlib, or svg

  tikz:
    latex_command: "pdflatex"
    convert_dpi: 300
    timeout_seconds: 30

  matplotlib:
    figure_size: [8, 6]
    dpi: 300

  svg:
    validate: true
    convert_to_png: true
  
# Prompt Templates
prompts:
  system_message: |
    You are an expert at transcribing mathematical content.
    Output ONLY a valid JSON object: {"text": "content", "geometry_crop_box": "coords_or_empty"}

    TEXT FIELD:
    - Transcribe all visible text in Chinese
    - Use $...$ for inline formulas, $$...$$ for display
    - Convert ALL math symbols to LaTeX (e.g., \sum, \alpha, \sqrt, \frac, \infty)
    - NO Unicode math symbols (Σ, α, ∞, etc.)
    - ADD the marker "【图形】" before the text describing geometry

    GEOMETRY FIELD:
    - If image contains geometry: determine precise crop box coordinates
    - Format: [x1, y1, x2, y2] where (x1,y1)=top-left, (x2,y2)=bottom-right
    - IMPORTANT: Add 15-25 pixel padding/margin around the geometry
    - Ensure the crop box includes the COMPLETE geometry with all LETTER LABELS (A, B, C, etc.) visible
    - Include any text labels, angle marks, dimension markers near the geometry
    - Coordinates are relative to the ORIGINAL image (before any preprocessing)
    - If no geometry: set to null or empty array []

    RULES:
    - JSON must be valid and parseable
    - Return crop box coordinates for geometry, not SVG code
    - Include "【图形】" marker in the text before geometry description
    - Do NOT add markdown, comments, or extra explanations

  user_message: |
    Transcribe this math image. Output JSON: {"text": "...", "geometry_crop_box": [x1,y1,x2,y2] or null}
    Convert all math to LaTeX. Add "【图形】" marker before geometry text.



  geometry_svg_system: |
    You are an expert math problem setter and SVG illustrator. Your job is to generate challenging three-dimensional geometry problems and provide a matching SVG diagram that satisfies strict formatting constraints.

    OUTPUT FORMAT (MANDATORY):
    - Respond with exactly one valid JSON object that contains two keys: "text" and "figure_svg".
    - Do not output Markdown, comments, additional prose, or multiple JSON objects.
    - The "text" field must be a Chinese description of the 3D geometry problem, including all necessary numerical data and the final question.
    - The "figure_svg" field must be a single-line string that contains complete SVG code. Escape double quotes as \" and encode line breaks as \n.

    SVG REQUIREMENTS:
    - Include a suitable viewBox attribute such as viewBox="0 0 200 200".
    - Use fundamental SVG elements like <path>, <line>, <circle>, and <text> to depict the solid.
    - Draw visible edges with solid black lines (stroke="black", stroke-width="1"), and hidden edges with dashed lines using stroke-dasharray="4 3".
    - Label every relevant vertex directly beside the point using <text> elements (font-size about 10px) with uppercase letters such as A, B, C, P, Q.
    - Ensure all strokes are black with stroke-width="1" and fills are transparent unless a solid face must be highlighted.
    - Produce accurate geometry; do not return placeholders or approximate sketches unrelated to the described solid.

    GENERAL RULES:
    - The JSON must be syntactically valid and directly parsable.
    - Keep the SVG concise but complete, ensuring all elements referenced in the text appear in the diagram.
    - If you cannot satisfy the requirements, explain the issue succinctly inside the "text" value while still outputting valid JSON.

  geometry_svg_user: |
    请生成一道关于立体几何（如棱锥、棱柱等）的题目，并按照以下要求返回 JSON：
    1. 仅输出形如 {"text": "...", "figure_svg": "..."} 的合法 JSON；不得包含其他说明或多余文本。
    2. "text" 字段写出中文题目，给出全部已知条件和求解目标。
    3. "figure_svg" 字段写出完整 SVG 代码字符串：必须包含 viewBox，使用 <path>/<line>/<circle>/<text> 等元素；可见棱用实线，不可见棱用 stroke-dasharray="4 3" 的虚线；在各顶点附近标注 A、B、C、P、Q 等字母（字体约 10px）；所有线条为黑色、粗细 1。
    4. SVG 中的双引号需转义为 \"，换行写成 \n，确保整段 SVG 是一个字符串。
    5. 不得返回占位符或空内容，题目与图形需相互对应且严谨。


# Logging Settings
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file_rotation: true
  max_bytes: 10485760  # 10MB
  backup_count: 5
  console_output: true
  
# Output Settings
output:
  directory: "output"
  filename_pattern: "math_problem_{timestamp}.docx"
  save_intermediate: false  # Save LaTeX and other intermediate files
  
# Performance Settings
performance:
  parallel_processing: false
  cache_api_responses: false
  cache_ttl_hours: 24
