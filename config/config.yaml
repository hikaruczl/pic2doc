# Advanced OCR Configuration File

# LLM Provider Settings
llm:
  primary_provider: "qwen"  # openai, anthropic, gemini, or qwen
  fallback_provider: null  # openai, anthropic, gemini, qwen, or null

  openai:
    model: "gpt-4-vision-preview"
    max_tokens: 4096
    temperature: 0.1
    detail: "high"  # low, high, or auto

  anthropic:
    model: "claude-3-sonnet-20240229"  # opus, sonnet, or haiku
    max_tokens: 4096
    temperature: 0.1

  gemini:
    model: "gemini-1.5-flash"  # gemini-1.5-pro or gemini-1.5-flash
    max_tokens: 4096
    temperature: 0.1

  qwen:
    model: "qwen3-vl-plus"  # qwen3-vl-plus or qwen3-vl-max
    max_tokens: 4096
    temperature: 0.1

  # LLM请求超时时间(秒)
  request_timeout_seconds: 600

  concurrency:
    enable: true
    max_parallel_requests: 3

  retry:
    max_attempts: 3
    delay_seconds: 2
    backoff_multiplier: 2

# Image Processing Settings
image:
  max_size_mb: 10
  supported_formats:
    - png
    - jpg
    - jpeg
    - pdf
  quality: 90
  base64_format: "jpeg"   # jpeg, png, webp
  base64_quality: 85
  base64_max_bytes: 3145728  # 3MB 上限, 超过会自动压缩/缩放
  preprocessing:
    resize_if_large: true
    max_dimension: 1600
    enhance_contrast: false
    denoise: false
  slicing:
    enable: true
    min_height: 2200
    aspect_ratio_threshold: 2.0
    target_height: 1100
    min_segment_height: 700
    overlap: 160  # 固定overlap模式下使用（当adaptive_overlap.enable=false时）
    whitespace_window: 150
    whitespace_density_threshold: 0.08
    max_segments: 0  # 0 表示不限制切片数量

    # 自适应overlap配置（根据切分点质量动态调整overlap大小）
    adaptive_overlap:
      enable: true  # 是否启用自适应overlap
      excellent_threshold: 0.05  # 极佳切分点阈值（内容密度 <= 0.05视为完全空白）
      good_threshold: 0.10       # 良好切分点阈值（内容密度 <= 0.10视为较空白）
      excellent_overlap: 0       # 极佳切分点使用的overlap（px）
      good_overlap: 30           # 良好切分点使用的overlap（px）
      default_overlap: 160       # 默认overlap（在内容区域切分时使用）

    debug:
      save_segments: true
      output_dir: "logs/segments"
      clear_before_save: true
    page_break_detection:
      enable: true
      whiteness_threshold: 0.97
      min_blank_height: 180
      margin_ratio: 0.04

# Formula Conversion Settings
formula:
  output_format: "mathml"  # mathml or latex
  preserve_latex: false  # Keep LaTeX in comments
  inline_formulas: true
  
# Document Generation Settings
document:
  default_font: "Arial"
  default_font_size: 11
  heading_font_size: 14
  include_original_image: true
  image_width_inches: 6.0
  page_margins:
    top: 1.0
    bottom: 1.0
    left: 1.0
    right: 1.0

# Graphics Generation Settings (for 3D geometry, diagrams, etc.)
graphics:
  enabled: true
  backend: "tikz"  # tikz, matplotlib, or svg

  tikz:
    latex_command: "pdflatex"
    convert_dpi: 300
    timeout_seconds: 30

  matplotlib:
    figure_size: [8, 6]
    dpi: 300

  svg:
    validate: true
    convert_to_png: true
  
# Prompt Templates
prompts:
  system_message: |
    You are an expert in accurately transcribing mathematical content from images.
    Always respond in Chinese unless a different language is explicitly requested.
    Your task is to faithfully reproduce ALL content from the image exactly as it appears.
    Preserve the original layout, order, and formatting of the text and formulas.
    For formulas: use $...$ for inline expressions and $$...$$ for display equations.
    Do not add any section headings, explanations, or additional commentary.
    Do not reorganize or restructure the content.
    Do not wrap the response in JSON, XML, Markdown tables, or any artificial structure unless that structure is explicitly present in the original image.
    Simply transcribe what you see in the image, maintaining the original presentation.

    🔴 CRITICAL FOR GEOMETRY DIAGRAMS:
    When you see ANY geometric diagram in the image（包括平面和立体几何图形）, you MUST generate complete TikZ code to recreate it.
    DO NOT just describe coordinates, and DO NOT leave empty TikZ blocks. Generate actual drawing commands with coordinates.
    First transcribe every piece of visible text, symbol, and formula exactly in order.
    Place the single ```tikz ... ``` block exactly at the position where the diagram appears in the original layout (before, between, or after text as appropriate). Do not relocate the diagram to the start or end unless the original layout does so.

    CRITICAL: You MUST use standard LaTeX commands, NOT Unicode symbols or plain text.

    ✅ ALWAYS USE (Required LaTeX commands):
    - Summation: \sum_{lower}^{upper}  (e.g., \sum_{i=1}^{N})
    - Product: \prod_{lower}^{upper}  (e.g., \prod_{i=1}^{n})
    - Integral: \int_{lower}^{upper}  (e.g., \int_{0}^{\infty})
    - Mean/average bar: \bar{X} or \overline{XYZ}  (e.g., \bar{Y}, \overline{x})
    - Fractions: \frac{numerator}{denominator}  (e.g., \frac{1}{N}, \frac{a+b}{c})
    - Square root: \sqrt{expression}  (e.g., \sqrt{2}, \sqrt{x^2+y^2})
    - Infinity: \infty
    - Greek letters: \alpha, \beta, \gamma, \delta, \theta, \lambda, \mu, \pi, \sigma, \phi, \omega
    - Relations: \approx, \neq, \leq, \geq, \in, \subset, \cup, \cap
    - Operators: \times, \div, \pm, \cdot
    - Arrows: \rightarrow, \leftarrow, \Rightarrow, \Leftrightarrow
    - Logic: \forall, \exists, \wedge, \vee, \neg
    - Matrices: \begin{pmatrix}...\end{pmatrix} for (), \begin{bmatrix}...\end{bmatrix} for [], \begin{vmatrix}...\end{vmatrix} for ||

    ❌ NEVER USE (Unicode symbols that will break rendering):
    - Σ, ∑, Π, ∏, ∫, √, ∞  (use LaTeX commands instead!)
    - α, β, γ, δ, θ, λ, μ, π, σ, φ, ω  (use \alpha, \beta, etc.)
    - ≈, ≠, ≤, ≥, ∈, ⊂, ∪, ∩  (use \approx, \neq, \leq, etc.)
    - ×, ÷, ±, ⋅  (use \times, \div, \pm, \cdot)
    - →, ←, ⇒, ⇔  (use \rightarrow, \leftarrow, etc.)
    - Ȳ, ā, x̄  (combining characters - use \bar{Y}, \bar{a}, \bar{x})
    - Plain text like (a+b)/c  (use \frac{a+b}{c})

    📐 3D GEOMETRY AND DIAGRAMS:
    When you encounter 3D geometric figures or diagrams that cannot be represented with text alone,
    generate TikZ code to draw them. Use the following format:

    ```tikz
    \begin{tikzpicture}[scale=2]
      % TikZ drawing commands here
    \end{tikzpicture}
    ```

    Common 3D geometry examples:

    1. Cube (正方体):
    ```tikz
    \begin{tikzpicture}[scale=2]
      \draw[fill=gray!20] (0,0) -- (1,0) -- (1,1) -- (0,1) -- cycle;
      \draw[fill=gray!40] (0.3,0.3) -- (1.3,0.3) -- (1.3,1.3) -- (0.3,1.3) -- cycle;
      \draw (0,0) -- (0.3,0.3);
      \draw (1,0) -- (1.3,0.3);
      \draw (1,1) -- (1.3,1.3);
      \draw (0,1) -- (0.3,1.3);
    \end{tikzpicture}
    ```

    2. Cone (圆锥):
    ```tikz
    \begin{tikzpicture}[scale=2]
      \draw[fill=gray!20] (0,0) ellipse (1 and 0.3);
      \draw[fill=gray!40] (-1,0) -- (0,2) -- (1,0);
      \draw[dashed] (-1,0) arc (180:360:1 and 0.3);
    \end{tikzpicture}
    ```

    3. Cylinder (圆柱):
    ```tikz
    \begin{tikzpicture}[scale=2]
      \draw[fill=gray!20] (0,0) ellipse (1 and 0.3);
      \draw[fill=gray!40] (-1,0) -- (-1,2) arc (180:360:1 and 0.3) -- (1,0);
      \draw[dashed] (-1,0) arc (180:0:1 and 0.3);
      \draw (1,0) -- (1,2);
      \draw (-1,0) -- (-1,2);
      \draw (0,2) ellipse (1 and 0.3);
    \end{tikzpicture}
    ```

    Always place TikZ code blocks at the appropriate position in the text where the figure appears.

    📝 EXAMPLES OF CORRECT OUTPUT:

    Example 1 - Summation formula:
    Image shows: "平均值 Ȳ = (Y₁+Y₂+...+Yₙ)/N = (1/N)ΣYᵢ"
    ✅ Correct output:
    平均值 $$\bar{Y} = \frac{Y_1+Y_2+\cdots+Y_N}{N} = \frac{1}{N}\sum_{i=1}^{N} Y_i$$

    Example 2 - Greek letters and fractions:
    Image shows: "标准差 σ = √(Σ(xᵢ-μ)²/n)"
    ✅ Correct output:
    标准差 $$\sigma = \sqrt{\frac{\sum_{i=1}^{n}(x_i-\mu)^2}{n}}$$

    Example 3 - Inline formulas:
    Image shows: "其中 n 表示样本数量，μ 表示均值"
    ✅ Correct output:
    其中 $n$ 表示样本数量，$\mu$ 表示均值

    Example 4 - Complex expression:
    Image shows: "概率密度函数 f(x) = (1/√(2πσ²))e^(-(x-μ)²/2σ²)"
    ✅ Correct output:
    概率密度函数 $$f(x) = \frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$

    Example 5 - Matrix:
    Image shows a 2x2 matrix with square brackets
    ✅ Correct output:
    $$\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}$$

    Example 6 - 3D geometry:
    Image shows a cube diagram
    ✅ Correct output:
    如图所示为一个正方体：
    ```tikz
    \begin{tikzpicture}[scale=2]
      \draw[fill=gray!20] (0,0) -- (1,0) -- (1,1) -- (0,1) -- cycle;
      \draw[fill=gray!40] (0.3,0.3) -- (1.3,0.3) -- (1.3,1.3) -- (0.3,1.3) -- cycle;
      \draw (0,0) -- (0.3,0.3);
      \draw (1,0) -- (1.3,0.3);
      \draw (1,1) -- (1.3,1.3);
      \draw (0,1) -- (0.3,1.3);
    \end{tikzpicture}
    ```

  user_message: |
    请完整还原这张图片中的所有内容，保持原有格式和顺序。

    关键要求：
    - 如果看到"如图所示"或任何几何图形，你必须生成TikZ代码，不要只写文字描述！
    - 公式按原位置输出：行内公式用 $公式$，单独成行的公式用 $$公式$$
    - 逐字逐句转录图片中的所有文字
    - 不要添加任何章节标题、分类或额外说明
    - 不要重新组织或调整内容结构
    - 保持图片中原有的段落分隔和排版
    - 除非原图中出现对应结构，否则不要把回答包裹成 JSON、XML 或列表
    TikZ 代码块要求：
    - TikZ 代码块必须出现在与原图相同的段落位置，整个回答中仅允许出现一个 TikZ 代码块；
    - 使用 `\begin{tikzpicture}[scale=?]` 开头并以 `\end{tikzpicture}` 结束；
    - 采用 `\coordinate` 或 `(x,y)` 明确给出所有关键点坐标，坐标系原点在图片左下角，单位 1 cm；
    - 所有长度、角度保留 1 位小数，标注使用 LaTeX 数学模式；
    - 只保留必要的绘制命令，避免重复的 `\draw` 语句或无效图元；
    - 可以补充 `\node`、`\angle` 等命令标注点、角度、边；
    - 若无法生成合理的 TikZ 代码，请说明原因，但仍需给出完整的文本转录。
    
    ⚠️ 特别注意：必须使用标准LaTeX命令，严禁使用Unicode符号！

    常见数学符号的正确写法：

    1. 求和符号（图片中的 Σ）：
       ✅ 正确：\sum_{i=1}^{N}
       ❌ 错误：Σ, ∑, sum

    2. 平均值符号（图片中的上划线 Ȳ, x̄）：
       ✅ 正确：\bar{Y}, \bar{x}, \overline{xyz}
       ❌ 错误：Ȳ, x̄, Y-, x-

    3. 分数（图片中的分数线）：
       ✅ 正确：\frac{分子}{分母}，如 \frac{1}{N}, \frac{a+b}{c}
       ❌ 错误：(1)/(N), 1/N, (a+b)/c

    4. 下标和上标：
       ✅ 正确：Y_i, Y_{i+1}, x^2, x^{2n}
       ❌ 错误：Yi, Y(i+1), x2

    5. 乘积符号（图片中的 Π）：
       ✅ 正确：\prod_{i=1}^{n}
       ❌ 错误：Π, ∏, prod

    6. 希腊字母（图片中的 α, β, σ, μ, π 等）：
       ✅ 正确：\alpha, \beta, \sigma, \mu, \pi
       ❌ 错误：α, β, σ, μ, π（不要用Unicode符号）

    7. 根号（图片中的 √）：
       ✅ 正确：\sqrt{2}, \sqrt{x^2+y^2}
       ❌ 错误：√2, sqrt(2)

    8. 关系符号：
       ✅ 正确：\approx, \leq, \geq, \neq
       ❌ 错误：≈, ≤, ≥, ≠

    9. 矩阵（图片中的矩阵）：
       ✅ 正确（圆括号）：\begin{pmatrix} a & b \\ c & d \end{pmatrix}
       ✅ 正确（方括号）：\begin{bmatrix} a & b \\ c & d \end{bmatrix}
       ✅ 正确（行列式）：\begin{vmatrix} a & b \\ c & d \end{vmatrix}

    10. 几何图形（包含平面或立体）：
        如果看到立方体、圆锥、圆柱等几何图形，使用 TikZ 代码绘制：
        ✅ 正确：
        ```tikz
        \begin{tikzpicture}[scale=2]
          % 绘图命令
        \end{tikzpicture}
        ```

    记住：看到任何数学符号，都要转换成对应的 LaTeX 命令！
    记住：看到几何图形，使用 TikZ 代码绘制，并在转录文字之后仅附加一个 TikZ 代码块！


  geometry_tikz_system: |
    You are an expert LaTeX TikZ illustrator. Recreate every geometric element (points, edges, faces,
    labels, right angles, parallel marks, etc.) from the provided image with precise TikZ code.
    Use these layout heuristics when assigning coordinates:
    - Let A = (0.0, 0.0) and place B on the positive x-axis around (4.5, 0.0) to keep AB horizontal.
    - Put C to the right and slightly above B (≈(6.5, 1.6)) so that BC is an upward sloping edge.
    - Put E directly above A along a slight left extension (≈(-0.2, 4.8)), and set F below A on the same vertical line (≈(-0.3, -1.6)).
    - Place D between A and E but slightly inside (≈(0.3, 2.2)) so that AD and DE lean into the interior the way the original perspective shows.
    - Preserve parallel, perpendicular, and equal-length relationships exactly as depicted; reuse identical vector differences for parallel segments and enforce right angles with orthogonal coordinates.
    - Distinguish visible edges (solid `\draw`) and hidden edges (`\draw[dashed]`), replicating the exact pattern of dashed edges seen in the image.
    - Reproduce right-angle markers using small squares drawn with `\draw` positioned at the correct vertices.
    - Keep coordinates with one decimal, avoid redundant `\draw` commands, and ensure the output compiles without additional packages.
    - Output a single compilable TikZ block wrapped in ```tikz ... ``` with no extra commentary.

  geometry_tikz_user: |
    请根据图像生成完整的 TikZ 代码，务必遵循以下要求：
    - 仅输出一个 ```tikz ... ``` 代码块，不要附带任何解释或额外文字。
    - 关键点建议坐标：A=(0.0,0.0)、B=(4.5,0.0)、C=(6.6,1.6)、E=(-0.2,4.8)、F=(-0.3,-1.6)、D=(0.4,2.0)。允许在 ±0.2cm 范围内微调，但必须保持原图的斜面轮廓。
    - 必须绘制的实线：A-B、B-C、C-E、E-A、A-F、F-B、B-E、A-D、D-E、D-B。
    - 必须绘制的虚线：D-C（水平方向）与 F-C（斜向隐藏棱）。如原图还含其它虚线，可酌情补充，但不得遗漏上述两条。
    - 仅当图中明确出现直角标记时才绘制小方块；不要臆造额外的标记。
    - 先使用 `\coordinate` 定义各点，然后分组绘制实线（默认 `\draw`）与虚线（`\draw[dashed]`），避免重复命令并保持线条整洁。
    - TikZ 代码块必须放在与原图相同的相对位置（不要统一放在文末）。
    - 输出前请自检：是否包含全部顶点标签、实线/虚线是否与原图一致、直角标记是否到位、坐标是否保持 1 位小数。


# Logging Settings
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file_rotation: true
  max_bytes: 10485760  # 10MB
  backup_count: 5
  console_output: true
  
# Output Settings
output:
  directory: "output"
  filename_pattern: "math_problem_{timestamp}.docx"
  save_intermediate: false  # Save LaTeX and other intermediate files
  
# Performance Settings
performance:
  parallel_processing: false
  cache_api_responses: false
  cache_ttl_hours: 24
