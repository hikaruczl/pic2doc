#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""测试SVG Base64解码"""

import base64
import sys

# 从日志中复制的Base64数据（被截断的那个）
test_b64 = "PHN2ZyB3aWR0aD0iMjAwIiBoZWlnaHQ9IjIwMCIgeG1sbnM9Imh0dHA6Ly93d3cuZWRnZXJlLmNvbS93aWxkL3N2ZyI+PHBhdGggZmlsbD0ibm9uZSIgc3R5bGU9ImZpbGw6IG5vbmU7IGZpbGwtb3BhY2l0eTogMS4wOyBmaWxsLXJ1bGU6IGV2ZW5vZGQ7IiBkPSJNMTEzLjE1LDIwMC4wMDNMMTA0LjA1LDE5My40NTVMMTExLjcxLDE4NS41MThMMTIzLjM0LDE4Mi44NDVMMTI3LjE0LDE4Mi40ODFMMTI4LjI5LDE4MS42OTlMMTI5LjE2LDE4MC40NDlMMTI5LjE2LDE3OS4yNzFMMTI5LjE2LDE3Ny44NDlMMTI5LjE2LDE3Ni4zMjFMMTI5LjE2LDE3NC43ODFMMTI5LjE2LDE3Mi44NDFMMTI5LjE2LDE3MS4wNDFMMTI5LjE2LDE2OC44NDFMMTI5LjE2LDE2Ny4wNDFMMTI5LjE2LDE2NS40NDFMMTI5LjE2LDE2My4xNDFMMTI5LjE2LDE2MS41NDFMMTI5LjE2LDE1OS44NDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5LjE2LDE1OC4wNDFMMTI5LjE2LDE1Ni4wNDFMMTI5LjE2LDE1NC4wNDFMMTI5LjE2LDE1Mi4wNDFMMTI5LjE2LDE1MC4wNDFMMTI5LjE2LDE0OC4wNDFMMTI5LjE2LDE0Ni4wNDFMMTI5LjE2LDE0NC4wNDFMMTI5LjE2LDE0Mi4wNDFMMTI5LjE2LDE0MC4wNDFMMTI5LjE2LDEzOC4wNDFMMTI5LjE2LDEzNi4wNDFMMTI5LjE2LDEzNC4wNDFMMTI5LjE2LDEzMi4wNDFMMTI5LjE2LDEzMC4wNDFMMTI5LjE2LDEyOC4wNDFMMTI5LjE2LDEyNi4wNDFMMTI5LjE2LDEyNC4wNDFMMTI5LjE2LDEyMi4wNDFMMTI5LjE2LDEyMC4wNDFMMTI5"

print("=" * 80)
print("SVG Base64解码测试")
print("=" * 80)

print(f"\nBase64字符串信息:")
print(f"  长度: {len(test_b64)} 字符")
print(f"  长度 % 4 = {len(test_b64) % 4}")

if len(test_b64) % 4 != 0:
    print(f"  ⚠️  警告: Base64长度不是4的倍数，可能被截断")
    # 尝试填充
    padding_needed = 4 - (len(test_b64) % 4)
    print(f"  需要填充: {padding_needed} 个 '=' 字符")
    test_b64_padded = test_b64 + ('=' * padding_needed)
    print(f"  填充后长度: {len(test_b64_padded)}")
else:
    print(f"  ✓ Base64长度正确")
    test_b64_padded = test_b64

print("\n" + "-" * 80)
print("步骤1: 尝试Base64解码")
print("-" * 80)

try:
    svg_bytes = base64.b64decode(test_b64_padded)
    print(f"✓ Base64解码成功")
    print(f"  解码后字节数: {len(svg_bytes)} bytes")

    # 尝试解析为文本
    try:
        svg_text = svg_bytes.decode('utf-8')
        print(f"  ✓ UTF-8解码成功")
        print(f"  文本长度: {len(svg_text)} 字符")

        # 显示SVG开头和结尾
        if len(svg_text) < 500:
            print(f"\nSVG完整内容:\n{svg_text}")
        else:
            print(f"\nSVG内容（前200字符）:")
            print(svg_text[:200])
            print(f"\nSVG内容（后200字符）:")
            print(svg_text[-200:])

        # 检查是否是有效的SVG
        if '<svg' in svg_text.lower():
            print(f"\n✓ 检测到SVG标签")
            if '</svg>' in svg_text.lower():
                print(f"✓ SVG标签完整（有闭合）")
            else:
                print(f"✗ SVG标签不完整（缺少</svg>）")
        else:
            print(f"\n✗ 未检测到SVG标签")

    except Exception as e:
        print(f"  ✗ UTF-8解码失败: {e}")
        print(f"  原始字节（前100）: {svg_bytes[:100]}")

except Exception as e:
    print(f"✗ Base64解码失败: {e}")
    sys.exit(1)

print("\n" + "-" * 80)
print("步骤2: 尝试SVG转PNG（如果有cairosvg）")
print("-" * 80)

try:
    import cairosvg
    print("✓ cairosvg已安装")

    try:
        png_bytes = cairosvg.svg2png(bytestring=svg_bytes)
        print(f"✓ SVG转PNG成功")
        print(f"  PNG大小: {len(png_bytes)} bytes")

        # 保存PNG文件
        output_file = "/tmp/test_decoded_svg.png"
        with open(output_file, 'wb') as f:
            f.write(png_bytes)
        print(f"✓ PNG已保存到: {output_file}")

        # 尝试用PIL打开验证
        try:
            from PIL import Image
            img = Image.open(output_file)
            print(f"✓ PIL验证成功: {img.size[0]}x{img.size[1]} 像素")
        except Exception as e:
            print(f"⚠️  PIL验证失败: {e}")

    except Exception as e:
        print(f"✗ SVG转PNG失败: {e}")

except ImportError:
    print("⚠️  cairosvg未安装，跳过PNG转换测试")
    print("   安装命令: pip install cairosvg")

print("\n" + "=" * 80)
print("测试完成")
print("=" * 80)
